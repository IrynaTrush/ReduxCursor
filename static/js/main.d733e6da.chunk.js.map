{"version":3,"sources":["redux/selectors/index.js","components/post/index.js","redux/reducers/home.reducer.js","App.js","redux/actions/home.actions.js","serviceWorker.js","redux/store.js","index.js"],"names":["posts","state","homeReducer","post","authors","Post","props","className","src","photo","alt","name","nickname","content","image","comments","shares","likes","initialState","id","action","type","value","App","postsStore","useSelector","authorsStore","useState","changeContent","url","changeURL","changeId","authorData","dispatch","useDispatch","newPost","map","item","key","Math","random","author","onSubmit","e","preventDefault","newPostHandler","placeholder","onChange","target","required","title","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAAaA,EAAQ,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,MACnCC,EAAU,SAAAH,GAAK,OAAIA,EAAMC,YAAYE,SCiCnCC,G,MA/BF,SAACC,GACb,OACG,yBAAKC,UAAU,eACf,yBAAKA,UAAU,QACX,yBAAKC,IAAKF,EAAMG,MAAOF,UAAU,YAAYG,IAAI,WACjD,yBAAKH,UAAU,WACX,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YAAYD,EAAMK,MACjC,uBAAGJ,UAAU,wBACb,yBAAKA,UAAU,YAAYD,EAAMM,SAAjC,KACA,yBAAKL,UAAU,YAAf,YACA,yBAAKA,UAAU,QACf,uBAAGA,UAAU,0BAGb,yBAAKA,UAAU,WAAWD,EAAMO,WAGxC,yBAAKN,UAAU,OACX,yBAAKC,IAAKF,EAAMQ,MAAOP,UAAU,WAAWG,IAAI,aAEpD,yBAAKH,UAAU,UACX,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,mBAAqB,8BAAOD,EAAMS,WACrE,yBAAKR,UAAU,QAAO,uBAAGA,UAAU,kBAAoB,8BAAOD,EAAMU,SACpE,yBAAKT,UAAU,QAAO,uBAAGA,UAAU,iBAAmB,8BAAOD,EAAMW,QACnE,yBAAKV,UAAU,QAAO,uBAAGA,UAAU,iC,QC1BrCW,EAAe,CACnBf,KAAM,CACF,CACEQ,KAAM,mBACNF,MAAO,6FACPG,SAAU,cACVC,QAAS,kDACTC,MAAO,gGACPC,SAAU,IACVC,OAAQ,IACRC,MAAO,KAET,CACEN,KAAM,mBACNF,MAAO,6FACPG,SAAU,cACVC,QAAS,kDACTC,MAAO,gGACPC,SAAU,IACVC,OAAQ,GACRC,MAAO,MAET,CACEN,KAAM,mBACNF,MAAO,6FACPG,SAAU,cACVC,QAAS,kDACTC,MAAO,gGACPC,SAAU,IACVC,OAAQ,IACRC,MAAO,MAGbb,QAAS,CACL,CACIO,KAAM,mBACNF,MAAO,6FACPG,SAAU,cACVO,GAAI,GAER,CACER,KAAM,gBACNF,MAAO,gJACPG,SAAU,cACVO,GAAI,GAER,CACIR,KAAM,YACNF,MAAO,+GACPG,SAAU,eACVO,GAAI,KAkBGjB,EAbY,WAAmC,IAAlCD,EAAiC,uDAAzBiB,EAAcE,EAAW,uCACzD,OAAOA,EAAOC,MACV,IA3DgB,WA4DZ,OAAO,eACApB,EADP,CAEIE,KAAK,GAAD,mBAAMF,EAAME,MAAZ,CAAkBiB,EAAOE,UAGrC,QACI,OAAOrB,ICuBJsB,MAhFf,WACE,IAAMC,EAAaC,YAAYzB,GACzB0B,EAAeD,YAAYrB,GAFpB,EAGoBuB,mBAAS,IAH7B,mBAGNd,EAHM,KAGGe,EAHH,OAIYD,mBAAS,IAJrB,mBAINE,EAJM,KAIDC,EAJC,OAKUH,mBAAS,GALnB,mBAKNR,EALM,KAKFY,EALE,KAMPC,EAAaN,EAAaP,GAC1Bc,EAAWC,cACXC,EAAO,eACRH,EADQ,CAEXnB,QAASA,EACTC,MAAOe,EACPd,SAAU,EACVC,OAAQ,EACRC,MAAO,IAoBHd,EAAOqB,EAAWY,KAAI,SAACC,GAC3B,OACE,yBAAKC,IAAKD,EAAOE,KAAKC,SAAUjC,UAAU,QACxC,kBAAC,EAAD,CACFA,UAAU,OACVI,KAAM0B,EAAK1B,KACXF,MAAO4B,EAAK5B,MACZG,SAAUyB,EAAKzB,SACfC,QAASwB,EAAKxB,QACdC,MAAOuB,EAAKvB,MAEZC,SAAUsB,EAAKtB,SACfC,OAAQqB,EAAKrB,OACbC,MAAOoB,EAAKpB,YAKVwB,EAASf,EAAaU,KAAI,SAACC,GAC/B,OACA,4BAAQf,MAAOe,EAAKlB,GAAImB,IAAe,GAAVD,EAAKlB,IAAUkB,EAAK1B,SAGnD,OACE,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,WACb,0BAAMA,UAAU,OAAOmC,SAhCV,SAACC,GACpBA,EAAEC,iBACFX,ECtC0B,SAAC9B,GAC3B,MAAO,CACHkB,KFJgB,WEKhBC,MAAOnB,GDmCF0C,CAAeV,MA+BhB,2BAAOW,YAAY,uBAAuBvC,UAAU,QAAQwC,SA7ChD,SAACJ,GACrBf,EAAce,EAAEK,OAAO1B,QA4CsE2B,UAAQ,IAC7F,2BAAOH,YAAY,eAAevC,UAAU,QAAQwC,SA1C5C,SAACJ,GACjBb,EAAUa,EAAEK,OAAO1B,QAyC8D2B,UAAQ,EAACC,MAAM,0CAExF,4BAAQ/B,GAAG,SAASZ,UAAU,SAAS0C,UAAQ,EAACF,SAxCrC,SAACJ,GACpBZ,EAASY,EAAEK,OAAO1B,SAwCPmB,GAGH,4BAAQlC,UAAU,MAAMc,KAAK,UAA7B,iBAGJ,yBAAKd,UAAU,SACZJ,MEtESgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAWC,YAAgB,CAC7BvD,gBAKWwD,EAFDC,YAAYH,GCC1BI,IAASC,OACR,kBAAC,IAAD,CAAUH,MAAOA,GACd,kBAAC,EAAD,OAEFI,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d733e6da.chunk.js","sourcesContent":["export const posts = state => state.homeReducer.post;\r\nexport const authors = state => state.homeReducer.authors;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Post = (props) => {\r\n return(\r\n    <div className=\"postWrapper\">\r\n    <div className=\"user\">\r\n        <img src={props.photo} className=\"userImage\" alt=\"easter\"/>\r\n        <div className=\"content\">\r\n            <div className=\"userInfo\">\r\n            <div className=\"username\">{props.name}</div>\r\n            <i className=\"fas fa-check-square\"></i>\r\n            <div className=\"userlink\">{props.nickname} </div>\r\n            <div className=\"userdate\">\"28 apr\"</div>\r\n            <div className=\"open\">\r\n            <i className=\"fas fa-chevron-down\"></i>\r\n            </div>\r\n            </div>\r\n            <div className=\"message\">{props.content}</div>\r\n        </div>\r\n    </div>\r\n    <div className=\"ray\">\r\n        <img src={props.image} className=\"rayImage\" alt=\"another\"/>\r\n    </div>\r\n    <div className=\"footer\">\r\n        <div className=\"item\"><i className=\"far fa-comment\"></i><span>{props.comments}</span></div>\r\n        <div className=\"item\"><i className=\"fas fa-random\"></i><span>{props.shares}</span></div>\r\n        <div className=\"item\"><i className=\"far fa-heart\"></i><span>{props.likes}</span></div>\r\n        <div className=\"item\"><i className=\"fas fa-cloud-upload-alt\"></i></div> \r\n    </div>\r\n</div>\r\n )\r\n}\r\n\r\nexport default Post;","export const ADD_POST = \"ADD_POST\";\r\n\r\nconst initialState = {\r\n  post: [\r\n      {\r\n        name: 'Anakin Skywalker', \r\n        photo: \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n        nickname: '@dart_vader',\r\n        content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n        image: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n        comments: 536,\r\n        shares: 134,\r\n        likes: 775\r\n      },\r\n      {\r\n        name: 'Anakin Skywalker', \r\n        photo: \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n        nickname: '@dart_vader',\r\n        content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n        image: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n        comments: 155,\r\n        shares: 99,\r\n        likes: 1124\r\n      },\r\n      {\r\n        name: 'Anakin Skywalker', \r\n        photo: \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n        nickname: '@dart_vader',\r\n        content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n        image: \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\",\r\n        comments: 321,\r\n        shares: 105,\r\n        likes: 789\r\n      }\r\n  ], \r\n  authors: [\r\n      {\r\n          name: 'Anakin Skywalker',\r\n          photo: \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\",\r\n          nickname: '@dart_vader',\r\n          id: 0,\r\n      },\r\n      {\r\n        name: 'Princess Leia',\r\n        photo: 'https://www.bitchmedia.org/sites/default/files/styles/article_page_featured_image/public/princess-leia-1280jpg-189929_1280w.png?itok=HPp5-4yc',\r\n        nickname: '@sweet_leia',\r\n        id: 1,\r\n    },\r\n    {\r\n        name: 'Chewbacca',\r\n        photo: 'https://vignette.wikia.nocookie.net/starwars/images/4/48/Chewbacca_TLJ.png/revision/latest?cb=20190830144754',\r\n        nickname: '@Chewba_buba',\r\n        id: 2,\r\n    },\r\n  ]\r\n} \r\n\r\nexport const homeReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                post: [...state.post, action.value]\r\n            };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default homeReducer;","import React, { useState } from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { posts, authors } from './redux/selectors';\nimport Post from '../src/components/post';\nimport { newPostHandler } from './redux/actions/home.actions'\n\n\n\nfunction App() {\n  const postsStore = useSelector(posts);\n  const authorsStore = useSelector(authors);\n  const [content, changeContent] = useState('');\n  const [url, changeURL] = useState('');\n  const [id, changeId] = useState(0);\n  const authorData = authorsStore[id];\n  const dispatch = useDispatch();\n  const newPost = {\n    ...authorData,\n    content: content,\n    image: url,\n    comments: 0,\n    shares: 0,\n    likes: 0,\n  }\n\n  const handleContent = (e) => {\n    changeContent(e.target.value);\n  };\n\n  const handleURL = (e) => {\n    changeURL(e.target.value);\n  }\n\n  const handleSelect = (e) => {\n    changeId(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(newPostHandler(newPost));\n  }\n\n  const post = postsStore.map((item) => {\n    return (\n      <div key={item + Math.random()} className=\"post\">\n        <Post\n      className=\"post\"\n      name={item.name}\n      photo={item.photo}\n      nickname={item.nickname}\n      content={item.content}\n      image={item.image}\n    \n      comments={item.comments}\n      shares={item.shares}\n      likes={item.likes}\n      />\n      </div>\n    );\n  });\n  const author = authorsStore.map((item) => {\n    return(\n    <option value={item.id} key={item.id * 10}>{item.name}</option>\n    )\n  })\n  return (\n    <div className=\"main\">\n      <div className=\"postsWrapper\">\n        <div className=\"newPost\">\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <input placeholder=\"Content of your post\" className=\"input\" onChange={handleContent} required/>\n            <input placeholder=\"URL of image\" className=\"input\" onChange={handleURL} required title='to show your image, paste a valid URL'/>\n            \n            <select id=\"select\" className=\"select\" required onChange={handleSelect}>\n              {author}\n            </select>\n            \n            <button className=\"btn\" type=\"submit\">Create post</button>\n          </form>\n        </div>\n        <div className=\"posts\">\n          {post}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_POST } from '../reducers/home.reducer';\r\n\r\nexport const newPostHandler = (post) => {\r\n    return {\r\n        type: ADD_POST,\r\n        value: post,\r\n    }\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore,combineReducers } from 'redux';\r\nimport homeReducer from './reducers/home.reducer';\r\n\r\nconst reducers = combineReducers({\r\n    homeReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from './redux/store'\n\nReactDOM.render(\n <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}